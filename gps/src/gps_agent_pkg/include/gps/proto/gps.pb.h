// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gps_2eproto;
namespace gps {
class Sample;
class SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
}  // namespace gps
PROTOBUF_NAMESPACE_OPEN
template<> ::gps::Sample* Arena::CreateMaybeMessage<::gps::Sample>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gps {

enum SampleType : int {
  ACTION = 0,
  JOINT_ANGLES = 1,
  JOINT_VELOCITIES = 2,
  END_EFFECTOR_POINTS = 3,
  END_EFFECTOR_POINT_VELOCITIES = 4,
  END_EFFECTOR_POINT_JACOBIANS = 5,
  END_EFFECTOR_POINT_ROT_JACOBIANS = 6,
  END_EFFECTOR_POSITIONS = 7,
  END_EFFECTOR_ROTATIONS = 8,
  END_EFFECTOR_JACOBIANS = 9,
  END_EFFECTOR_HESSIANS = 10,
  RGB_IMAGE = 11,
  DEPTH_IMAGE = 12,
  RGB_IMAGE_SIZE = 13,
  CONTEXT_IMAGE = 14,
  CONTEXT_IMAGE_SIZE = 15,
  IMAGE_FEAT = 16,
  END_EFFECTOR_POINTS_NO_TARGET = 17,
  END_EFFECTOR_POINT_VELOCITIES_NO_TARGET = 18,
  NOISE = 19,
  TOTAL_DATA_TYPES = 20
};
bool SampleType_IsValid(int value);
constexpr SampleType SampleType_MIN = ACTION;
constexpr SampleType SampleType_MAX = TOTAL_DATA_TYPES;
constexpr int SampleType_ARRAYSIZE = SampleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SampleType_descriptor();
template<typename T>
inline const std::string& SampleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SampleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SampleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SampleType_descriptor(), enum_t_value);
}
inline bool SampleType_Parse(
    const std::string& name, SampleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SampleType>(
    SampleType_descriptor(), name, value);
}
enum ActuatorType : int {
  TRIAL_ARM = 0,
  AUXILIARY_ARM = 1,
  TOTAL_ACTUATOR_TYPES = 2
};
bool ActuatorType_IsValid(int value);
constexpr ActuatorType ActuatorType_MIN = TRIAL_ARM;
constexpr ActuatorType ActuatorType_MAX = TOTAL_ACTUATOR_TYPES;
constexpr int ActuatorType_ARRAYSIZE = ActuatorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActuatorType_descriptor();
template<typename T>
inline const std::string& ActuatorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActuatorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActuatorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActuatorType_descriptor(), enum_t_value);
}
inline bool ActuatorType_Parse(
    const std::string& name, ActuatorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActuatorType>(
    ActuatorType_descriptor(), name, value);
}
enum PositionControlMode : int {
  NO_CONTROL = 0,
  JOINT_SPACE = 1,
  TASK_SPACE = 2,
  TOTAL_CONTROL_MODES = 3
};
bool PositionControlMode_IsValid(int value);
constexpr PositionControlMode PositionControlMode_MIN = NO_CONTROL;
constexpr PositionControlMode PositionControlMode_MAX = TOTAL_CONTROL_MODES;
constexpr int PositionControlMode_ARRAYSIZE = PositionControlMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionControlMode_descriptor();
template<typename T>
inline const std::string& PositionControlMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PositionControlMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PositionControlMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PositionControlMode_descriptor(), enum_t_value);
}
inline bool PositionControlMode_Parse(
    const std::string& name, PositionControlMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PositionControlMode>(
    PositionControlMode_descriptor(), name, value);
}
enum ControllerType : int {
  LIN_GAUSS_CONTROLLER = 0,
  CAFFE_CONTROLLER = 1,
  TF_CONTROLLER = 2,
  TOTAL_CONTROLLER_TYPES = 3
};
bool ControllerType_IsValid(int value);
constexpr ControllerType ControllerType_MIN = LIN_GAUSS_CONTROLLER;
constexpr ControllerType ControllerType_MAX = TOTAL_CONTROLLER_TYPES;
constexpr int ControllerType_ARRAYSIZE = ControllerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControllerType_descriptor();
template<typename T>
inline const std::string& ControllerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControllerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControllerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControllerType_descriptor(), enum_t_value);
}
inline bool ControllerType_Parse(
    const std::string& name, ControllerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControllerType>(
    ControllerType_descriptor(), name, value);
}
// ===================================================================

class Sample :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gps.Sample) */ {
 public:
  Sample();
  virtual ~Sample();

  Sample(const Sample& from);
  Sample(Sample&& from) noexcept
    : Sample() {
    *this = ::std::move(from);
  }

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample& operator=(Sample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
               &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Sample* other);
  friend void swap(Sample& a, Sample& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sample* New() const final {
    return CreateMaybeMessage<Sample>(nullptr);
  }

  Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gps.Sample";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gps_2eproto);
    return ::descriptor_table_gps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float X = 5 [packed = true];
  int x_size() const;
  void clear_x();
  static const int kXFieldNumber = 5;
  float x(int index) const;
  void set_x(int index, float value);
  void add_x(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_x();

  // repeated float U = 6 [packed = true];
  int u_size() const;
  void clear_u();
  static const int kUFieldNumber = 6;
  float u(int index) const;
  void set_u(int index, float value);
  void add_u(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      u() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_u();

  // repeated float obs = 7 [packed = true];
  int obs_size() const;
  void clear_obs();
  static const int kObsFieldNumber = 7;
  float obs(int index) const;
  void set_obs(int index, float value);
  void add_obs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      obs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_obs();

  // repeated float meta = 8 [packed = true];
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 8;
  float meta(int index) const;
  void set_meta(int index, float value);
  void add_meta(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      meta() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_meta();

  // optional uint32 dX = 2;
  bool has_dx() const;
  void clear_dx();
  static const int kDXFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 dx() const;
  void set_dx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 dU = 3;
  bool has_du() const;
  void clear_du();
  static const int kDUFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 du() const;
  void set_du(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 dO = 4;
  bool has_do_() const;
  void clear_do_();
  static const int kDOFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 do_() const;
  void set_do_(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 T = 1 [default = 100];
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 t() const;
  void set_t(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:gps.Sample)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > x_;
  mutable std::atomic<int> _x_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > u_;
  mutable std::atomic<int> _u_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > obs_;
  mutable std::atomic<int> _obs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > meta_;
  mutable std::atomic<int> _meta_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 du_;
  ::PROTOBUF_NAMESPACE_ID::uint32 do__;
  ::PROTOBUF_NAMESPACE_ID::uint32 t_;
  friend struct ::TableStruct_gps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sample

// optional uint32 T = 1 [default = 100];
inline bool Sample::has_t() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sample::clear_t() {
  t_ = 100u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sample::t() const {
  // @@protoc_insertion_point(field_get:gps.Sample.T)
  return t_;
}
inline void Sample::set_t(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  t_ = value;
  // @@protoc_insertion_point(field_set:gps.Sample.T)
}

// optional uint32 dX = 2;
inline bool Sample::has_dx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sample::clear_dx() {
  dx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sample::dx() const {
  // @@protoc_insertion_point(field_get:gps.Sample.dX)
  return dx_;
}
inline void Sample::set_dx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  dx_ = value;
  // @@protoc_insertion_point(field_set:gps.Sample.dX)
}

// optional uint32 dU = 3;
inline bool Sample::has_du() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sample::clear_du() {
  du_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sample::du() const {
  // @@protoc_insertion_point(field_get:gps.Sample.dU)
  return du_;
}
inline void Sample::set_du(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  du_ = value;
  // @@protoc_insertion_point(field_set:gps.Sample.dU)
}

// optional uint32 dO = 4;
inline bool Sample::has_do_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sample::clear_do_() {
  do__ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sample::do_() const {
  // @@protoc_insertion_point(field_get:gps.Sample.dO)
  return do__;
}
inline void Sample::set_do_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  do__ = value;
  // @@protoc_insertion_point(field_set:gps.Sample.dO)
}

// repeated float X = 5 [packed = true];
inline int Sample::x_size() const {
  return x_.size();
}
inline void Sample::clear_x() {
  x_.Clear();
}
inline float Sample::x(int index) const {
  // @@protoc_insertion_point(field_get:gps.Sample.X)
  return x_.Get(index);
}
inline void Sample::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:gps.Sample.X)
}
inline void Sample::add_x(float value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:gps.Sample.X)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Sample::x() const {
  // @@protoc_insertion_point(field_list:gps.Sample.X)
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Sample::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:gps.Sample.X)
  return &x_;
}

// repeated float U = 6 [packed = true];
inline int Sample::u_size() const {
  return u_.size();
}
inline void Sample::clear_u() {
  u_.Clear();
}
inline float Sample::u(int index) const {
  // @@protoc_insertion_point(field_get:gps.Sample.U)
  return u_.Get(index);
}
inline void Sample::set_u(int index, float value) {
  u_.Set(index, value);
  // @@protoc_insertion_point(field_set:gps.Sample.U)
}
inline void Sample::add_u(float value) {
  u_.Add(value);
  // @@protoc_insertion_point(field_add:gps.Sample.U)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Sample::u() const {
  // @@protoc_insertion_point(field_list:gps.Sample.U)
  return u_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Sample::mutable_u() {
  // @@protoc_insertion_point(field_mutable_list:gps.Sample.U)
  return &u_;
}

// repeated float obs = 7 [packed = true];
inline int Sample::obs_size() const {
  return obs_.size();
}
inline void Sample::clear_obs() {
  obs_.Clear();
}
inline float Sample::obs(int index) const {
  // @@protoc_insertion_point(field_get:gps.Sample.obs)
  return obs_.Get(index);
}
inline void Sample::set_obs(int index, float value) {
  obs_.Set(index, value);
  // @@protoc_insertion_point(field_set:gps.Sample.obs)
}
inline void Sample::add_obs(float value) {
  obs_.Add(value);
  // @@protoc_insertion_point(field_add:gps.Sample.obs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Sample::obs() const {
  // @@protoc_insertion_point(field_list:gps.Sample.obs)
  return obs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Sample::mutable_obs() {
  // @@protoc_insertion_point(field_mutable_list:gps.Sample.obs)
  return &obs_;
}

// repeated float meta = 8 [packed = true];
inline int Sample::meta_size() const {
  return meta_.size();
}
inline void Sample::clear_meta() {
  meta_.Clear();
}
inline float Sample::meta(int index) const {
  // @@protoc_insertion_point(field_get:gps.Sample.meta)
  return meta_.Get(index);
}
inline void Sample::set_meta(int index, float value) {
  meta_.Set(index, value);
  // @@protoc_insertion_point(field_set:gps.Sample.meta)
}
inline void Sample::add_meta(float value) {
  meta_.Add(value);
  // @@protoc_insertion_point(field_add:gps.Sample.meta)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Sample::meta() const {
  // @@protoc_insertion_point(field_list:gps.Sample.meta)
  return meta_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Sample::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_list:gps.Sample.meta)
  return &meta_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gps

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gps::SampleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gps::SampleType>() {
  return ::gps::SampleType_descriptor();
}
template <> struct is_proto_enum< ::gps::ActuatorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gps::ActuatorType>() {
  return ::gps::ActuatorType_descriptor();
}
template <> struct is_proto_enum< ::gps::PositionControlMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gps::PositionControlMode>() {
  return ::gps::PositionControlMode_descriptor();
}
template <> struct is_proto_enum< ::gps::ControllerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gps::ControllerType>() {
  return ::gps::ControllerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gps_2eproto
